package com.example.mahafuz.connect;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.support.annotation.NonNull;
import android.support.design.widget.TextInputLayout;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.squareup.picasso.Picasso;
import com.theartofdev.edmodo.cropper.CropImage;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import de.hdodenhof.circleimageview.CircleImageView;
import id.zelory.compressor.Compressor;

public class SettingAccount extends AppCompatActivity {
    private DatabaseReference databaseReference;
    private FirebaseUser cu;
    private TextView mStatus, mName;
    private EditText mChangeStatus;
    private AlertDialog.Builder builder;
    private Button chnageStatus,changedp;
    private TextInputLayout mchangeStatusil;
    private CircleImageView mDp;
    private View mView,mViewImage;
    private static final int galCode = 1;
    private StorageReference mStroageRef;
    private ProgressDialog mProgessBar;
    private ImageView dp_view;
    String dp_Link;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_setting_account);
        cu = FirebaseAuth.getInstance().getCurrentUser();
        mStatus = findViewById(R.id.account_status);
        mName = findViewById(R.id.account_name);
        builder = new AlertDialog.Builder(this);
        mView = getLayoutInflater().inflate(R.layout.dialog_box,null);
        mChangeStatus =mView.findViewById(R.id.status_change);
        mchangeStatusil = mView.findViewById(R.id.status_changeil);
        chnageStatus = findViewById(R.id.account_cs);
        mViewImage = getLayoutInflater().inflate(R.layout.dp_view,null);
        dp_view = mViewImage.findViewById(R.id.dp_view_account);
        String uid = cu.getUid();
        changedp = findViewById(R.id.account_cp);
        mStroageRef = FirebaseStorage.getInstance().getReference();
        databaseReference = FirebaseDatabase.getInstance().getReference().child("User").child(uid);
        mDp = findViewById(R.id.circle_profile);

        SetAllData();

        chnageStatus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View view) {
                BtnChangeStatus();
            }
        });

        changedp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent galPic = new Intent();
                galPic.setType("image/*");
                galPic.setAction(Intent.ACTION_GET_CONTENT);
                startActivityForResult(Intent.createChooser(galPic,"Image"),galCode);

            }
        });

        mDp.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Picasso.with(getApplicationContext()).load(dp_Link).placeholder(R.drawable.avatar).into(dp_view);
                builder.setView(mViewImage);
                builder.show();

            }
        });




    }

    private void BtnChangeStatus() {
        AlertDialog.Builder changeStatus = new AlertDialog.Builder(this);
        changeStatus.setView(mView)

                .setPositiveButton("Change", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        startActivity(new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                        if (TextUtils.isEmpty(mChangeStatus.getText().toString().trim()))
                            mchangeStatusil.setError("Enter Status");
                        else {
                            databaseReference.child("Status").setValue(mChangeStatus.getText().toString());
                            dialogInterface.cancel();

                        }

                    }
                })
                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        dialogInterface.dismiss();
                    }
                });

        final AlertDialog alert = builder.create();
        alert.show();
    }

    private void SetAllData() {
        databaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                String name = dataSnapshot.child("Name").getValue().toString();
                dp_Link = dataSnapshot.child("Image").getValue().toString();
                String status = dataSnapshot.child("Status").getValue().toString();
                mName.setText(name);
                mStatus.setText(status);
                Picasso.with(getApplicationContext()).load(dp_Link).into(mDp);
            }

            @Override
            public void onCancelled(DatabaseError databaseError) {

            }
        });
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode==galCode && resultCode == RESULT_OK){
            Uri imageUri = data.getData();
            CropImage.activity(imageUri)
                    .setAspectRatio(1,1)
                    .start(SettingAccount.this);

        }



        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE){
            CropImage.ActivityResult result = CropImage.getActivityResult(data);
            if (resultCode == RESULT_OK){
                mProgessBar = new ProgressDialog(SettingAccount.this);
                mProgessBar.setTitle("Uploading..");
                mProgessBar.setMessage("Processing Image");
                mProgessBar.setCanceledOnTouchOutside(false);
                mProgessBar.show();
                Uri resultUri = result.getUri();

                File thumb_File = new File(resultUri.getPath());
                Bitmap thumb_dp = null;

                try {
                    thumb_dp = new Compressor(this)
                            .setMaxWidth(200)
                            .setMaxHeight(200)
                            .setQuality(25)
                            .compressToBitmap(thumb_File);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                thumb_dp.compress(Bitmap.CompressFormat.JPEG, 100, baos);
                final byte[] thumb_data = baos.toByteArray();
                StorageReference filePath = mStroageRef.child("Profile_Image").child(cu.getUid()+".jpg");
                final StorageReference bitMap = mStroageRef.child("Profile_Image").child("thumbs").child(cu.getUid()+".jpg");
                filePath.putFile(resultUri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {
                        if (task.isSuccessful()){

                            final String  download = task.getResult().getDownloadUrl().toString();
                            UploadTask uploadTask = bitMap.putBytes(thumb_data);

                            uploadTask.addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                                @Override
                                public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {
                                    String thumb_Url = task.getResult().getDownloadUrl().toString();

                                    if (task.isSuccessful()){

                                        Map dataMap = new HashMap();
                                        dataMap.put("Image",download);
                                        dataMap.put("ThumbImage",thumb_Url);

                                        databaseReference.updateChildren(dataMap).addOnCompleteListener(new OnCompleteListener<Void>() {
                                            @Override
                                            public void onComplete(@NonNull Task<Void> task) {
                                                if (task.isSuccessful()){
                                                    mProgessBar.dismiss();
                                                    Toast.makeText(SettingAccount.this, "Successful", Toast.LENGTH_SHORT).show();
                                                }
                                            }
                                        });
                                    }else {
                                        Toast.makeText(SettingAccount.this, "Failed", Toast.LENGTH_SHORT).show();
                                        mProgessBar.dismiss();
                                    }

                                }
                            });

                        }else {
                            Toast.makeText(SettingAccount.this, "Failed", Toast.LENGTH_SHORT).show();
                        }
                    }
                });
            }
        }
        else if (requestCode==CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE){
            Toast.makeText(this, "Error", Toast.LENGTH_SHORT).show();
        }
    }



}
